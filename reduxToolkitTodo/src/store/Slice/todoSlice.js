import React from 'react'
import { createSlice , nanoid} from '@reduxjs/toolkit'
import { useDispatch } from 'react-redux'
const dispatch = useDispatch
// 1. Initial State (initialState):
// This contains the default values for your order management system. The initialState object is where all the
//  properties related to an order and the UI state are defined.
// 2. Reducers:
// Reducers in Redux are functions that handle how the state should change in response to an action. 
// They listen for specific actions and modify the state accordingly.

// Each reducer in your slice updates a specific part of the state. For example:

// setOrder: Updates the order object with the data provided in the payload.
// setLoading: Toggles the loading state, which could be used to show a loading spinner in the UI.
// setAllOrders: Updates the list of all orders in the state.
// // setPositions: Updates the positions (likely related to trading positions) in the state.

// 3. Actions:
// Actions are plain JavaScript objects that are dispatched to the Redux store to trigger the reducers. 
// In this file, actions are generated by Redux Toolkit's createSlice and are exported for use in other parts of the app.

// 3. Actions:
// Actions are plain JavaScript objects that are dispatched to the Redux store to trigger the reducers.
//  In this file, actions are generated by Redux Toolkit's createSlice and are exported for use in other parts of the app.

// 5. createSlice:
// The createSlice function is a part of Redux Toolkit that combines actions and reducers in a simpler way. 
// It allows you to automatically generate action creators and action types based on the reducers you've defined.

const intitialState = {
    todos: [{id: 1, text: "Hello world"}]
}

export const todoSlice = createSlice({
    name: 'todo',
    intitialState,
    //reducer can declare here directly 
    reducers: {
        addTodo: (state,action) => {
            const todo = {
                id: nanoid(),
                text: action.payload
            }
            state.todos.push(todo)
        },
        // state is current intalstate but changes
        // actions [1,2,3,4]
        removeTodo: (state, action) => {
            state.todos = state.todos.filter((todo) => (
                todo.id !== action.payload
            ))
        },
    }
})

//we have export indvidual reducers used in components
export const {addTodo, removeTodo} = todoSlice.actions

//exporting the todoslice rducer and export 
export default todoSlice.reducer